#!/usr/bin/python
# -*- coding: utf-8 -*-
from sys import argv, stdout
from math import pow
import gd
import argparse

color_table = {
	'irc': (
		( 0xff, 0xff, 0xff ), ( 0, 0, 0 ), ( 0, 0, 0xaa ),
		( 0, 0xaa, 0 ), ( 0xff, 0x55, 0x55 ), ( 0xaa, 0, 0 ),
		( 0xaa, 0, 0xaa ), ( 0xaa, 0x55, 0 ), ( 0xff, 0xff, 0x55 ),
		( 0x55, 0xff, 0x55 ), ( 0, 0xaa, 0xaa ), ( 0x55, 0xff, 0xff ),
		( 0x55, 0x55, 0xff ), ( 0xff, 0x55, 0xff ), ( 0x55, 0x55, 0x55 ),
		( 0xaa, 0xaa, 0xaa )
	),
	'256': (
		( 0, 0, 0 ), ( 128, 0, 0 ), ( 0, 128, 0 ),
		( 128, 128, 0 ), ( 0, 0, 128 ), ( 128, 0, 128 ),
		( 0, 128, 128 ), ( 192, 192, 192 ), ( 128, 128, 128 ),
		( 255, 0, 0 ), ( 0, 255, 0 ), ( 255, 255, 0 ),
		( 0, 0, 255 ), ( 255, 0, 255 ), ( 0, 255, 255 ),
		( 255, 255, 255 ), ( 0, 0, 0 ), ( 0, 0, 95 ), ( 0, 0, 135 ), ( 0, 0, 175 ), ( 0, 0, 215 ), ( 0, 0, 255 ), ( 0, 95, 0 ), 
		( 0, 95, 95 ), ( 0, 95, 135 ), ( 0, 95, 175 ), ( 0, 95, 215 ), ( 0, 95, 255 ), ( 0, 135, 0 ), ( 0, 135, 95 ), 
		( 0, 135, 135 ), ( 0, 135, 175 ), ( 0, 135, 215 ), ( 0, 135, 255 ), ( 0, 175, 0 ), ( 0, 175, 95 ), ( 0, 175, 135 ), 
		( 0, 175, 175 ), ( 0, 175, 215 ), ( 0, 175, 255 ), ( 0, 215, 0 ), ( 0, 215, 95 ), ( 0, 215, 135 ), ( 0, 215, 175 ), 
		( 0, 215, 215 ), ( 0, 215, 255 ), ( 0, 255, 0 ), ( 0, 255, 95 ), ( 0, 255, 135 ), ( 0, 255, 175 ), ( 0, 255, 215 ), 
		( 0, 255, 255 ), ( 95, 0, 0 ), ( 95, 0, 95 ), ( 95, 0, 135 ), ( 95, 0, 175 ), ( 95, 0, 215 ), ( 95, 0, 255 ), 
		( 95, 95, 0 ), ( 95, 95, 95 ), ( 95, 95, 135 ), ( 95, 95, 175 ), ( 95, 95, 215 ), ( 95, 95, 255 ), ( 95, 135, 0 ), 
		( 95, 135, 95 ), ( 95, 135, 135 ), ( 95, 135, 175 ), ( 95, 135, 215 ), ( 95, 135, 255 ), ( 95, 175, 0 ), 
		( 95, 175, 95 ), ( 95, 175, 135 ), ( 95, 175, 175 ), ( 95, 175, 215 ), ( 95, 175, 255 ), ( 95, 215, 0 ), 
		( 95, 215, 95 ), ( 95, 215, 135 ), ( 95, 215, 175 ), ( 95, 215, 215 ), ( 95, 215, 255 ), ( 95, 255, 0 ), 
		( 95, 255, 95 ), ( 95, 255, 135 ), ( 95, 255, 175 ), ( 95, 255, 215 ), ( 95, 255, 255 ), ( 135, 0, 0 ), 
		( 135, 0, 95 ), ( 135, 0, 135 ), ( 135, 0, 175 ), ( 135, 0, 215 ), ( 135, 0, 255 ), ( 135, 95, 0 ), 
		( 135, 95, 95 ), ( 135, 95, 135 ), ( 135, 95, 175 ), ( 135, 95, 215 ), ( 135, 95, 255 ), ( 135, 135, 0 ), 
		( 135, 135, 95 ), ( 135, 135, 135 ), ( 135, 135, 175 ), ( 135, 135, 215 ), ( 135, 135, 255 ), ( 135, 175, 0 ), 
		( 135, 175, 95 ), ( 135, 175, 135 ), ( 135, 175, 175 ), ( 135, 175, 215 ), ( 135, 175, 255 ), ( 135, 215, 0 ), 
		( 135, 215, 95 ), ( 135, 215, 135 ), ( 135, 215, 175 ), ( 135, 215, 215 ), ( 135, 215, 255 ), ( 135, 255, 0 ), 
		( 135, 255, 95 ), ( 135, 255, 135 ), ( 135, 255, 175 ), ( 135, 255, 215 ), ( 135, 255, 255 ), ( 175, 0, 0 ), 
		( 175, 0, 95 ), ( 175, 0, 135 ), ( 175, 0, 175 ), ( 175, 0, 215 ), ( 175, 0, 255 ), ( 175, 95, 0 ), ( 175, 95, 95 ), 
		( 175, 95, 135 ), ( 175, 95, 175 ), ( 175, 95, 215 ), ( 175, 95, 255 ), ( 175, 135, 0 ), ( 175, 135, 95 ), 
		( 175, 135, 135 ), ( 175, 135, 175 ), ( 175, 135, 215 ), ( 175, 135, 255 ), ( 175, 175, 0 ), ( 175, 175, 95 ), 
		( 175, 175, 135 ), ( 175, 175, 175 ), ( 175, 175, 215 ), ( 175, 175, 255 ), ( 175, 215, 0 ), ( 175, 215, 95 ), 
		( 175, 215, 135 ), ( 175, 215, 175 ), ( 175, 215, 215 ), ( 175, 215, 255 ), ( 175, 255, 0 ), ( 175, 255, 95 ), 
		( 175, 255, 135 ), ( 175, 255, 175 ), ( 175, 255, 215 ), ( 175, 255, 255 ), ( 215, 0, 0 ), ( 215, 0, 95 ), 
		( 215, 0, 135 ), ( 215, 0, 175 ), ( 215, 0, 215 ), ( 215, 0, 255 ), ( 215, 95, 0 ), ( 215, 95, 95 ), ( 215, 95, 135 ), 
		( 215, 95, 175 ), ( 215, 95, 215 ), ( 215, 95, 255 ), ( 215, 135, 0 ), ( 215, 135, 95 ), ( 215, 135, 135 ), 
		( 215, 135, 175 ), ( 215, 135, 215 ), ( 215, 135, 255 ), ( 215, 175, 0 ), ( 215, 175, 95 ), ( 215, 175, 135 ), 
		( 215, 175, 175 ), ( 215, 175, 215 ), ( 215, 175, 255 ), ( 215, 215, 0 ), ( 215, 215, 95 ), ( 215, 215, 135 ), 
		( 215, 215, 175 ), ( 215, 215, 215 ), ( 215, 215, 255 ), ( 215, 255, 0 ), ( 215, 255, 95 ), ( 215, 255, 135 ), 
		( 215, 255, 175 ), ( 215, 255, 215 ), ( 215, 255, 255 ), ( 255, 0, 0 ), ( 255, 0, 95 ), ( 255, 0, 135 ), 
		( 255, 0, 175 ), ( 255, 0, 215 ), ( 255, 0, 255 ), ( 255, 95, 0 ), ( 255, 95, 95 ), ( 255, 95, 135 ), 
		( 255, 95, 175 ), ( 255, 95, 215 ), ( 255, 95, 255 ), ( 255, 135, 0 ), ( 255, 135, 95 ), ( 255, 135, 135 ), 
		( 255, 135, 175 ), ( 255, 135, 215 ), ( 255, 135, 255 ), ( 255, 175, 0 ), ( 255, 175, 95 ), ( 255, 175, 135 ), 
		( 255, 175, 175 ), ( 255, 175, 215 ), ( 255, 175, 255 ), ( 255, 215, 0 ), ( 255, 215, 95 ), ( 255, 215, 135 ),
		( 255, 215, 175 ), ( 255, 215, 215 ), ( 255, 215, 255 ), ( 255, 255, 0 ), ( 255, 255, 95 ), ( 255, 255, 135 ), 
		( 255, 255, 175 ), ( 255, 255, 215 ), ( 255, 255, 255 ), ( 0, 0, 0 ), ( 18, 18, 18 ), ( 28, 28, 28 ), ( 38, 38, 38 ), 
		( 48, 48, 48 ), ( 58, 58, 58 ), ( 68, 68, 68 ), ( 78, 78, 78 ), ( 88, 88, 88 ), ( 98, 98, 98 ), ( 108, 108, 108 ), 
		( 118, 118, 118 ), ( 128, 128, 128 ), ( 138, 138, 138 ), ( 148, 148, 148 ), ( 158, 158, 158 ), ( 168, 168, 168 ), 
		( 178, 178, 178 ), ( 188, 188, 188 ), ( 198, 198, 198 ), ( 208, 208, 208 ), ( 218, 218, 218 ), ( 228, 228, 228 ), 
		( 238, 238, 238 )
	),
	'16':	(
		( 0, 0, 0) , ( 128, 0, 0 ), ( 0, 128, 0 ),
		( 128, 128, 0 ), ( 0, 0, 128 ), ( 128, 0, 128 ),
		( 0, 128, 128 ), ( 192, 192, 192 ), ( 128, 128, 128 ),
		( 255, 0, 0 ), ( 0, 255, 0 ), ( 255, 255, 0 ),
		( 0, 0, 255 ), ( 255, 0, 255 ), ( 0, 255, 255 ),
		( 255, 255, 255 )
	)
}
	

def colorMatch(color, table):
	red = color >> 16;
	green = color % 65536 >> 8;
	blue = color % 256;
	best_match = 0;
	d=0.0,
	smallest_distance = 10000000000.0;
	for c in range(len(table)):
		d = pow(table[c][0]-red, 2.0) +\
			pow(table[c][1]-green, 2.0) +\
			pow(table[c][2]-blue, 2.0);
		if (d<smallest_distance):
			smallest_distance = d;
			best_match = c;
	return best_match;

if len(argv)<4:
	print "usage: %s <16|256|irc> <u|n> <imagefile> [imagefiles...]" % argv[0]
else:
	colors=argv[1]
	#if 'irc' not in colors:
	#	colors = int(argv[1])
	use_unicode = argv[2]
	for imagefile in argv[3:]:
		a=gd.image(imagefile)
		(x,y)=a.size()
		old_bottom_color=0
		old_top_color=0
		if 'irc' in colors:
			destfile=stdout
		else:
			destfile=open(imagefile+'.ansi','w')
		if use_unicode is 'u':
			y=y/2+y%2
		for h in range(y):
			for w in range(x):
				if use_unicode is 'u':
					top_color=colorMatch(a.getPixel([w,h*2]),color_table[colors])
					bottom_color=colorMatch(a.getPixel([w,h*2+1]),color_table[colors])
					if (top_color is not old_top_color) or (bottom_color is not old_bottom_color):
						if 'irc' in colors:
							destfile.write("\x03%d,%d▀" % (top_color, bottom_color))
						else:
							destfile.write("\x1b[38;05;%dm\x1b[48;05;%dm▀" % (top_color, bottom_color))
						old_top_color=top_color
						old_bottom_color=bottom_color
					else:
						destfile.write("▀")
				else:
					top_color=colorMatch(a.getPixel([w,h]),color_table[colors])
					if top_color is not old_top_color:
						if 'irc' in colors:
							destfile.write("\x031,%d  " % top_color)
						else:
							destfile.write("\x1b[48;05;%dm  " % top_color)
						old_top_color=top_color
					else:
						destfile.write("  ")
			if 'irc' not in colors:
				if use_unicode is 'u':
					destfile.write("\x1b[0m\n\x1b[38;05;%dm\x1b[48;05;%dm" % (top_color, bottom_color))
				else:
					destfile.write("\x1b[0m\n\x1b[48;05;%dm" % top_color)
			else:
				destfile.write("\n")
		if 'irc' not in colors:
			destfile.close()
